{"version":3,"sources":["webpack:///./index.js"],"names":["require","myInput","document","getElementById","fp","flatpickr","enableTime","dateFormat","ref","btnStart","querySelector","btnStop","timer","selector","this","root","template","insertAdjacentHTML","interval","refs","days","hours","mins","secs","start","startTime","selectedDates","disabled","setInterval","currentTime","Date","now","deltaTime","updateClock","stop","clearInterval","clear","textContent","time","pad","Math","floor","value","String","padStart","addEventListener","bind"],"mappings":"6JAEAA,EAAQ,QAER,IAAMC,EAAUC,SAASC,eAAe,WAElCC,EAAKC,YAAUJ,EAAS,CAAEK,YAAY,EAAMC,WAAY,cAExDC,EAAM,CACVC,SAAUP,SAASQ,cAAc,aACjCC,QAAST,SAASQ,cAAc,aAqE5BE,EAAQ,I,WAlEZ,cAA0B,IAAZC,EAAY,EAAZA,SACZC,KAAKD,SAAWA,EAChBC,KAAKC,KAAOb,SAASQ,cAAcI,KAAKD,UACxCC,KAAKE,SAAL,2iBAiBAF,KAAKC,KAAKE,mBAAmB,YAAaH,KAAKE,UAC/CF,KAAKI,SAAW,KAChBJ,KAAKK,KAAO,CACVC,KAAMN,KAAKC,KAAKL,cAAc,uBAC9BW,MAAOP,KAAKC,KAAKL,cAAc,wBAC/BY,KAAMR,KAAKC,KAAKL,cAAc,uBAC9Ba,KAAMT,KAAKC,KAAKL,cAAc,wB,2BAGlCc,MAAA,WAAQ,WACAC,EAAYrB,EAAGsB,cAAc,GAC/BD,IACFjB,EAAIC,SAASkB,UAAW,EACxBb,KAAKI,SAAWU,aAAY,WAC1B,IAAMC,EAAcC,KAAKC,MAEnBC,EAAYP,EAAYI,EAC9B,EAAKI,YAAYD,KAChB,O,EAGPE,KAAA,WACEC,cAAcrB,KAAKI,UACnBd,EAAGgC,QACH5B,EAAIC,SAASkB,UAAW,EACxBb,KAAKK,KAAKC,KAAKiB,YAAf,IACAvB,KAAKK,KAAKE,MAAMgB,YAAhB,IACAvB,KAAKK,KAAKG,KAAKe,YAAf,IACAvB,KAAKK,KAAKI,KAAKc,YAAf,K,EAEFJ,YAAA,SAAYK,GACV,IAAMlB,EAAON,KAAKyB,IAAIC,KAAKC,MAAMH,EAAO,QAClCjB,EAAQP,KAAKyB,IACjBC,KAAKC,MAAOH,EAAO,MAAR,OAEPhB,EAAOR,KAAKyB,IAAIC,KAAKC,MAAOH,EAAO,KAAR,MAC3Bf,EAAOT,KAAKyB,IAAIC,KAAKC,MAAOH,EAAO,IAAe,MACxDxB,KAAKK,KAAKC,KAAKiB,YAAf,GAAgCjB,EAChCN,KAAKK,KAAKE,MAAMgB,YAAhB,GAAiChB,EACjCP,KAAKK,KAAKG,KAAKe,YAAf,GAAgCf,EAChCR,KAAKK,KAAKI,KAAKc,YAAf,GAAgCd,G,EAElCgB,IAAA,SAAIG,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,KAGvB,CAAmB,CAC/B/B,SAAU,aAEZL,EAAIC,SAASoC,iBAAiB,QAASjC,EAAMY,MAAMsB,KAAKlC,IACxDJ,EAAIG,QAAQkC,iBAAiB,QAASjC,EAAMsB,KAAKY,KAAKlC,M","file":"main.27b64f8cab1753e32223.js","sourcesContent":["import './styles.css';\r\nimport flatpickr from 'flatpickr';\r\nrequire('../node_modules/flatpickr/dist/themes/dark.css');\r\n\r\nconst myInput = document.getElementById('myInput');\r\n\r\nconst fp = flatpickr(myInput, { enableTime: true, dateFormat: 'Y-m-d H:i' });\r\n\r\nconst ref = {\r\n  btnStart: document.querySelector('.btnStart'),\r\n  btnStop: document.querySelector('.btnStop'),\r\n};\r\nclass CountdownTimer {\r\n  constructor({ selector }) {\r\n    this.selector = selector;\r\n    this.root = document.querySelector(this.selector);\r\n    this.template = `<div class=\"field\">\r\n        <span class=\"value\" data-value=\"days\">0</span>\r\n        <span class=\"label\">Days</span>\r\n      </div>\r\n      <div class=\"field\">\r\n        <span class=\"value\" data-value=\"hours\">0</span>\r\n        <span class=\"label\">Hours</span>\r\n      </div>\r\n      <div class=\"field\">\r\n        <span class=\"value\" data-value=\"mins\">0</span>\r\n        <span class=\"label\">Minutes</span>\r\n      </div>\r\n      <div class=\"field\">\r\n        <span class=\"value\" data-value=\"secs\">0</span>\r\n        <span class=\"label\">Seconds</span>\r\n      </div>`;\r\n\r\n    this.root.insertAdjacentHTML('beforeend', this.template);\r\n    this.interval = null;\r\n    this.refs = {\r\n      days: this.root.querySelector(\"[data-value='days']\"),\r\n      hours: this.root.querySelector(\"[data-value='hours']\"),\r\n      mins: this.root.querySelector(\"[data-value='mins']\"),\r\n      secs: this.root.querySelector(\"[data-value='secs']\"),\r\n    };\r\n  }\r\n  start() {\r\n    const startTime = fp.selectedDates[0];\r\n    if (startTime) {\r\n      ref.btnStart.disabled = true;\r\n      this.interval = setInterval(() => {\r\n        const currentTime = Date.now();\r\n        // console.log(currentTime);\r\n        const deltaTime = startTime - currentTime;\r\n        this.updateClock(deltaTime);\r\n      }, 1000);\r\n    }\r\n  }\r\n  stop() {\r\n    clearInterval(this.interval);\r\n    fp.clear();\r\n    ref.btnStart.disabled = false;\r\n    this.refs.days.textContent = `${0}`;\r\n    this.refs.hours.textContent = `${0}`;\r\n    this.refs.mins.textContent = `${0}`;\r\n    this.refs.secs.textContent = `${0}`;\r\n  }\r\n  updateClock(time) {\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    this.refs.days.textContent = `${days}`;\r\n    this.refs.hours.textContent = `${hours}`;\r\n    this.refs.mins.textContent = `${mins}`;\r\n    this.refs.secs.textContent = `${secs}`;\r\n  }\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n}\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n});\r\nref.btnStart.addEventListener('click', timer.start.bind(timer));\r\nref.btnStop.addEventListener('click', timer.stop.bind(timer));\r\n"],"sourceRoot":""}